import urllib
import json
import datetime

from Tkinter import *
import TkTreectrl as Tktree
import webbrowser
import Tkinter, Tkconstants, tkFileDialog


import os
from PIL import Image, ImageTk
from string import *
import emoji
import ast
from natsort import natsorted
import shutil

from tkinter import ttk

dirpath=''
debug=1


def update():
    for i in range(1,2621):
        a='https://beatsaver.com/api.php?mode=details&id='
        b=str(i)
        c=a+b
        try:
            d=open('details/'+b+'.json','r')
            print 'b found'
        except:
            print 'need to dl',b
            urllib.urlretrieve(c,'details/'+b+'.json')
        #print i

def make_all_data(tot):
    mlist=[]
    for a in range(1,tot):
        json_data=open('details/'+str(a)+'.json').read()

        data = json.loads(json_data)
        mlist.append(data)
    print len(mlist)
    d=open('alldata.json','w')
    d.write(str(mlist))
    d.close()
    
def getdir():
    global dirpath
    dirpath = tkFileDialog.askdirectory()

    d={'dir':dirpath}
    a=open('config.json','w')
    a.write(str(d))
    a.close()
    print 
def opendownloads(bb):



    for line in bb.readlines():
        line=ast.literal_eval(line)
        print line,'this is a line' ,len(line)
        have= line
        return have
    
def downloads():
    print 'FUCK OFF'
    have=[]
    print 'need to dl'
    for x in os.listdir(dirpath+'/'+'CustomSongs'):
        isdir=False
        try:
            int(x)
            isdir=True
            
        except:
            print 'not a dir'
        if isdir==True:
            have.append(int(x))
    d=open('downloads.json','w')
    d.write(str(have))
    return have
            
def main():
    global dirpath


    root = Tk()
    root.bg='black'
    root.title('BPM')

    configfound=False
    try:
        zz=open('config.json','r')
        configfound=True
        
    except:
        getdir()
        zz=open('config.json','r')

    for line in zz.readlines():
        line=ast.literal_eval(line)
        dirpath= line['dir']

            
    dls=False
    try:
        bb=open('downloads.json','r')
        dls=True

        
    except:
        have=downloads()
    if dls==True:
        have=opendownloads(bb)
    print type(have),'fuckdddddd'

    if configfound:
        for line in zz.readlines():
            line=ast.literal_eval(line)
            dirpath= line['dir']
            if len(dirpath)<3:
                getdir()
    if debug>0:
        print dirpath,'dirpath@!!!!!'

    try:
        d=open('alldata.json','r')
        lenn=0
        for line in d.readlines():
            lenn=lenn+1
            
            mlist=ast.literal_eval(line)
            
            print len(line),'mlist len'

        print lenn
            
        print 'found huge list'
    except:
        make_all_data(2621)
        'making huge list'

    
    tree = ttk.Treeview( root, columns=('Dose', 'Modification date',3,4,5,6,7,8))
    tree.heading('#0', text='BSID')
    tree.heading('#1', text='songName')
    tree.heading('#2', text='songSubName')
    tree.heading('#3', text='suthorName')
    tree.heading('#4', text='BPM')
    tree.heading('#5', text='uploadtime')
    tree.heading('#6', text='uploader')
    tree.heading('#7', text='downloads')
    tree.heading('#8', text='Local')
    #tree.heading('#9', text='upvotes')
    tree.tag_configure('oddrow', background='white')
    tree.tag_configure('evenrow', background='gray')

    vsb = Scrollbar(root, orient="vertical", command=tree.yview)
    #vsb.place(x=30+200+2, y=95, height=200+20)
    


    tree.grid(column=0,row=0)
    vsb.grid(column=1,row=0,sticky='N'+'S')
    tree.configure(yscrollcommand=vsb.set)

    full_list=[]
    for z in range(len(mlist)):
        dld=False
            
        #print len(mlist[z])
        if len(mlist[z])>0:
            #a= mlist[z][0].keys()
            #print a[1]
            #print mlist[z]
            time1=mlist[z][0]['uploadtime']
            time1=int(time1)
            time1=datetime.datetime.fromtimestamp(time1).strftime('%m-%d-%Y')
            #print time1
            #tree.insert('','end',text=mlist[z][0]['id'],values=[mlist[z][0]['songName'],mlist[z][0]['songSubName'],mlist[z][0]['authorName'],mlist[z][0]['beatsPerMinute']
            #                                                    ,time1,mlist[z][0]['uploader'],mlist[z][0]['downloads'],mlist[z][0]['id'],mlist[z][0]['upvotes']])

            dd= int(mlist[z][0]['id'])
            #print type(dd)
            #print type(have)
            for j in range(len(have)):
                #print type(dd),type(have[j])
                
                if dd in have:
                    
                    dld=True
            
                
            item=[mlist[z][0]['id'],mlist[z][0]['songName'],mlist[z][0]['songSubName'],mlist[z][0]['authorName'],mlist[z][0]['beatsPerMinute'],time1,mlist[z][0]['uploader'],mlist[z][0]['downloads'],dld,mlist[z][0]['id'],mlist[z][0]['upvotes']]
            if dld==True:
                item[8]=True

            full_list.append(item)
    for z in range(len(full_list)):
        if z%2==1:

            tree.insert('','end',text=full_list[z][0],values=[full_list[z][1],full_list[z][2],full_list[z][3],full_list[z][4],full_list[z][5],full_list[z][6],full_list[z][7],full_list[z][8]],tags = ('oddrow',))
        if z%2==0:

            tree.insert('','end',text=full_list[z][0],values=[full_list[z][1],full_list[z][2],full_list[z][3],full_list[z][4],full_list[z][5],full_list[z][6],full_list[z][7],full_list[z][8]],tags = ('evenrow',))



        
    mainloop()


main()


#make_all_data(2621)
